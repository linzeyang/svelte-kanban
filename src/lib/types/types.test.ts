import { describe, test, expect } from 'vitest';
import type {
	TaskItem,
	TaskStatus,
	NavigationItem,
	KanbanColumn,
	AppState,
	AIRequirementBreakdown,
	ApiResponse,
	AppError
} from './index.js';

describe('Type System Validation', () => {
	test('TaskItem interface should have required properties', () => {
		const task: TaskItem = {
			id: '1',
			title: 'Test Task',
			description: 'Test Description',
			status: 'todo',
			createdAt: new Date(),
			updatedAt: new Date()
		};

		expect(task.id).toBe('1');
		expect(task.title).toBe('Test Task');
		expect(task.status).toBe('todo');
	});

	test('TaskStatus should only allow valid values', () => {
		const validStatuses: TaskStatus[] = ['todo', 'in-progress', 'testing', 'done'];

		validStatuses.forEach((status) => {
			const task: TaskItem = {
				id: '1',
				title: 'Test',
				description: 'Test',
				status,
				createdAt: new Date(),
				updatedAt: new Date()
			};
			expect(task.status).toBe(status);
		});
	});

	test('NavigationItem interface should work correctly', () => {
		const navItem: NavigationItem = {
			id: 'kanban',
			label: 'Kanban',
			icon: 'ðŸ“‹',
			active: true,
			disabled: false
		};

		expect(navItem.id).toBe('kanban');
		expect(navItem.active).toBe(true);
	});

	test('KanbanColumn interface should contain tasks', () => {
		const column: KanbanColumn = {
			id: 'todo',
			title: 'To Do',
			color: 'neon-blue',
			tasks: []
		};

		expect(column.id).toBe('todo');
		expect(Array.isArray(column.tasks)).toBe(true);
	});

	test('AppState interface should have all required properties', () => {
		const appState: AppState = {
			activeNavItem: 'kanban',
			sidebarCollapsed: false,
			theme: 'dark',
			isMobile: false,
			viewport: {
				width: 1920,
				height: 1080
			}
		};

		expect(appState.theme).toBe('dark');
		expect(appState.viewport.width).toBe(1920);
	});

	test('AI types should work with task integration', () => {
		const breakdown: AIRequirementBreakdown = {
			tasks: [
				{
					id: '1',
					title: 'AI Generated Task',
					description: 'Generated by AI',
					status: 'todo',
					createdAt: new Date(),
					updatedAt: new Date(),
					aiGenerated: true
				}
			],
			summary: 'Created 1 task',
			originalRequirement: 'Create user login',
			metadata: {
				processingTime: 1500,
				model: 'gpt-4',
				timestamp: new Date()
			}
		};

		expect(breakdown.tasks).toHaveLength(1);
		expect(breakdown.tasks[0].aiGenerated).toBe(true);
	});

	test('API response types should handle success and error cases', () => {
		// Test successful API response
		const successResponse: ApiResponse<TaskItem[]> = {
			success: true,
			data: [
				{
					id: '1',
					title: 'Test Task',
					description: 'Test',
					status: 'todo',
					createdAt: new Date(),
					updatedAt: new Date()
				}
			]
		};

		expect(successResponse.success).toBe(true);
		expect(successResponse.data).toHaveLength(1);

		// Test error API response
		const errorResponse: ApiResponse = {
			success: false,
			error: 'Task not found',
			message: 'The requested task could not be found'
		};

		expect(errorResponse.success).toBe(false);
		expect(errorResponse.error).toBe('Task not found');
	});

	test('AppError should handle structured error details', () => {
		const error: AppError = {
			code: 'VALIDATION_ERROR',
			message: 'Invalid task data',
			details: {
				field: 'title',
				reason: 'Title cannot be empty',
				value: ''
			},
			timestamp: new Date()
		};

		expect(error.code).toBe('VALIDATION_ERROR');
		expect(error.details).toHaveProperty('field');
		expect(error.details?.field).toBe('title');
	});

	test('Type system should enforce strict typing', () => {
		// This test ensures our types prevent common mistakes
		const createTask = (data: Partial<TaskItem>): TaskItem => {
			return {
				id: data.id || crypto.randomUUID(),
				title: data.title || 'Untitled',
				description: data.description || '',
				status: data.status || 'todo',
				createdAt: data.createdAt || new Date(),
				updatedAt: data.updatedAt || new Date(),
				...data
			};
		};

		const task = createTask({
			title: 'Test Task',
			description: 'Test Description'
		});

		expect(task.title).toBe('Test Task');
		expect(task.status).toBe('todo');
		expect(task.id).toBeDefined();
	});
});
