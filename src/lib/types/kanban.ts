/**
 * Kanban board and task-related type definitions
 */

export type TaskStatus = 'todo' | 'in-progress' | 'testing' | 'done';

export type TaskPriority = 'low' | 'medium' | 'high';

export interface TaskItem {
	/** Unique identifier for the task */
	id: string;
	/** Task title/summary */
	title: string;
	/** Detailed task description */
	description: string;
	/** Current status of the task */
	status: TaskStatus;
	/** Task priority level */
	priority?: TaskPriority;
	/** When the task was created */
	createdAt: Date;
	/** When the task was last updated */
	updatedAt: Date;
	/** Whether this task was generated by AI */
	aiGenerated?: boolean;
	/** Original requirement text if AI generated */
	originalRequirement?: string;
	/** Estimated effort or story points */
	estimatedEffort?: number;
	/** Tags or labels for categorization */
	tags?: string[];
}

export interface KanbanColumn {
	/** Column identifier matching TaskStatus */
	id: TaskStatus;
	/** Display title for the column */
	title: string;
	/** Color theme identifier for the column */
	color: string;
	/** Tasks currently in this column */
	tasks: TaskItem[];
	/** Maximum number of tasks allowed (WIP limit) */
	wipLimit?: number;
}

export interface KanbanBoard {
	/** Board identifier */
	id: string;
	/** Board title */
	title: string;
	/** All columns in the board */
	columns: KanbanColumn[];
	/** All tasks across all columns */
	tasks: TaskItem[];
}

export interface KanbanState {
	/** Current board data */
	board: KanbanBoard;
	/** Whether the board is currently loading */
	isLoading: boolean;
	/** Current error message if any */
	error: string | null;
	/** Selected task for detailed view */
	selectedTask: TaskItem | null;
}

export type KanbanAction =
	| { type: 'ADD_TASK'; payload: TaskItem }
	| { type: 'UPDATE_TASK'; payload: { id: string; updates: Partial<TaskItem> } }
	| { type: 'DELETE_TASK'; payload: string }
	| { type: 'MOVE_TASK'; payload: { taskId: string; newStatus: TaskStatus } }
	| { type: 'SET_LOADING'; payload: boolean }
	| { type: 'SET_ERROR'; payload: string | null }
	| { type: 'SELECT_TASK'; payload: TaskItem | null }
	| { type: 'BULK_ADD_TASKS'; payload: TaskItem[] };
